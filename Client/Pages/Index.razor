@page "/"

@using PortfolioWithServer.Client.Components;
@using PortfolioWithServer.Shared.Models;
@using PortfolioWithServer.Client.Services;
@using PortfolioWithServer.Client.Components.Experience;
@using PortfolioWithServer.Client.Components.Skills;
@using PortfolioWithServer.Client.Components.Achievements;

@inject ExperienceService experienceService
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<FloatingNavigation Sections="@_sections" />

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <div id="contact" class="mb-10">
        <ContactInfo />
    </div>

    <MudDivider Class="my-4 mb-10" Color="Color.Grey" />

    <div id="experience">
        <MudText Typo="Typo.h4" Class="mb-4" Style="font-weight: bold; color: gray; text-align: center;">
            Professional Experience
        </MudText>

        @if (DeviceType == "desktop") {
            <MudTimeline>
                @foreach (var experience in experiences)
                {
                    <MudTimelineItem>
                        <ExperienceCard Exp="experience" Index="experiences.IndexOf(experience)" />
                    </MudTimelineItem>
                }
            </MudTimeline>
        }
        else
        {
            @foreach (var experience in experiences)
            {
                <ExperienceCardMobile Exp="experience" Index="experiences.IndexOf(experience)" />
            }
        }
    </div>

    <MudDivider Class="my-8" />

    <div id="skills">
        <SkillsComponent />
    </div>

    <MudDivider Class="my-8" />

    <div id="achievements">
        <MudText Typo="Typo.h5" Class="mb-4" Style="font-weight: bold; color: gray; text-align: center;">
            <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Color="Color.Warning" Size="Size.Large" Class="mr-2" />
            Achievements
        </MudText>

        <MudGrid Justify="Justify.Center">
            @if (Achievements.Count == 1)
            {
                <MudItem xs="12" sm="6" md="6" Class="d-flex justify-center">
                    <AchievementCard Achievement="Achievements[0]" />
                </MudItem>
            }
            else
            {
                @foreach (var achievement in Achievements)
                {
                    <MudItem xs="12" sm="6" md="6">
                        <AchievementCard Achievement="achievement" />
                    </MudItem>
                }
            }
        </MudGrid>
    </div>

    <MudDivider Class="my-8" />

    <MudPaper Elevation="3" Class="pa-8 mt-8 text-center">
        <MudIcon Icon="@Icons.Material.Filled.Construction" Color="Color.Primary" Size="Size.Large" Class="mb-4" />
        <MudText Typo="Typo.h4" Class="mb-4">Projects Coming Soon!</MudText>
        <MudText Typo="Typo.body1">As this is a project I work on in my free time, I'll be pushing exciting new showcases soon. Stay tuned!</MudText>
    </MudPaper>
</MudContainer>

@code {
    private Dictionary<string, string> _sections = new Dictionary<string, string>
    {
        {"contact", "Contact"},
        {"experience", "Experience"},
        {"skills", "Skills"},
        {"achievements", "Achievements"},
        {"projects", "Projects"}
    };

    [Parameter]
    public bool IsLoading { get; set; }

    private List<Experience> experiences = new List<Experience>();
    private List<Achievement> Achievements = new List<Achievement>();
    private string DeviceType { get; set; } = "desktop";

    protected override async Task OnInitializedAsync()
    {
        experiences = await experienceService.GetExperiencesAsync();
        Achievements = await Http.GetFromJsonAsync<List<Achievement>>("api/achievements");
        DeviceType = await JSRuntime.InvokeAsync<string>("detectDeviceType");
    }
}
